name: Deploy to AWS
concurrency:
  group: deploy-aws
  cancel-in-progress: true

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Repository auschecken
        uses: actions/checkout@v3

      - name: Ensure SSH directory exists
        run: mkdir -p ~/.ssh

      - name: Change Access Rights for install-server-dependencies.sh
        run: chmod +x ./infrastructure/main/install-server-dependencies.sh

      - name: Check if server has everything installed
        run: ./infrastructure/main/install-server-dependencies.sh "${{ secrets.AWS_SSH_KEY }}"

      - name: Change Access Rights for clean-docker-and-pull-repository.sh
        run: chmod +x ./infrastructure/main/clean-docker-and-pull-repository.sh

      - name: Clean Docker and Pull Repository
        run: ./infrastructure/main/clean-docker-and-pull-repository.sh "${{ secrets.AWS_SSH_KEY }}"

      - name: Change Access Rights for cardodoc.sh
        run: chmod +x ./infrastructure/main/cargodoc.sh

      - name: Generate Pong and Calculation Unit Documentation
        run: ./infrastructure/main/cargodoc.sh "${{ secrets.AWS_SSH_KEY }}"

      - name: Change Access Rights for generate-docs.sh
        run: chmod +x ./client/generate-client-doc.sh

      - name: Generate Client Documentation
        run: ./client/generate-client-doc.sh "${{ secrets.AWS_SSH_KEY }}"

      - name: Deploy Doxygen HTML to Nginx directory
        run: |
          echo "${{ secrets.AWS_SSH_KEY }}" > ~/.ssh/temp_key.pem
          chmod 400 ~/.ssh/temp_key.pem
          
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/temp_key.pem ec2-user@ec2-18-196-124-42.eu-central-1.compute.amazonaws.com << 'EOF'
            echo "✅ Doxygen-Dokumentation wird für nginx bereitgestellt..."
          
            # Zielverzeichnis für nginx
            TARGET_DIR="/usr/share/nginx/html/doxygen"
            SOURCE_DIR="/home/ec2-user/client/doc/doxygen-doc/html"
          
            # Sicherstellen, dass Quelle existiert
            if [ -d "$SOURCE_DIR" ]; then
              sudo mkdir -p "$TARGET_DIR"
              sudo cp -r "$SOURCE_DIR"/* "$TARGET_DIR"/
              sudo chown -R nginx:nginx "$TARGET_DIR"
              sudo restorecon -R "$TARGET_DIR" 2>/dev/null || true
              echo "✅ HTML erfolgreich bereitgestellt unter $TARGET_DIR"
            else
              echo "❌ Quellverzeichnis $SOURCE_DIR nicht gefunden!"
              exit 1
            fi
          
            # Nginx reload für den Fall neuer Dateien
            sudo nginx -t && sudo systemctl reload nginx
          EOF
          
          rm -f ~/.ssh/temp_key.pem

      - name: Change Access Rights for start-server.sh
        run: chmod +x ./infrastructure/main/start-server.sh

      - name: Restart or Start the server
        run: ./infrastructure/main/start-server.sh "${{ secrets.AWS_SSH_KEY }}"
